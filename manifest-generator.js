var fs = require('fs');
var radm = require('render-appcache-manifest');
var glob = require('glob');

module.exports = function(directory, outPath) {
	var result = {};

	var watchers = [];
	var dir = directory;
	var out = outPath;

	result.generate = function(err, cb, options) {
		options = options || {};

		var contents = {
			// By default we want to completely disable all access to the 
			// outside world for static resources
			network: options.network || [],
			cache: [],
			fallback: options.fallback || {'/': '/offline.html'},
			lastModified: new Date(),
			comment: options.comment || "Generated by Syrup"
		};

		glob('**/*.*', {cwd: dir}, function(error, files) {
			if (error && err) {
				return err(error);
			}

			files.forEach(function(element, index, array) {
				console.log(element);
				contents.cache.push(element);
			})
		})
			.on('end', function() {
				var output = radm(contents);
				
				fs.writeFile(out, output, function(error, fd) {
					if (error && err) {
						return err(error);
					}

					if (cb) cb();
				});
			});
	}

	result.startWatching = function(err, cb) {
		if (watchers.length > 0) {
			this.stopWatching();
		}

		dirs.forEach(function(element, index, array) {
			watchers.push(fs.watch(element, function() {
				generate(err, cb);
			}));
		});
	}

	result.stopWatching = function() {
		watchers.forEach(function(element, index, array) {
			element.close();
		});
		watchers = [];
	}

	return result;
}